{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Literacy 201502\"\nauthor: \"coop711\"\ndate: \"2015년 9월 19일\"\noutput: html_document\n---\n\n# Data \n\n## Excel 자료 읽어들이기 \n\n* 코딩된 excel 자료 스크린샷\n\n![엑셀 자료 스크린샷](../pics/screenshot.png)\n\n* excel 파일을 잘 읽어들이는 `xlsx` 패키지를 올려놓고, 자료구조에 맞춰 argument 설정.\n    * Sheet 번호, startRow, colIndex, header 의 용도 파악. \n\n```{r}\nlibrary(xlsx)\nlibrary(pander)\noptions(width=180)\nliteracy <- read.xlsx(\"../data/literacy_0916.xlsx\", 1, startRow = 2, colIndex = c(4, 10:34), colClasses=c(\"numeric\", rep(\"character\", 25)), header = TRUE)\nstr(literacy)\npander(head(literacy[, -1]))\n```\n\n## 문해력 점수 계산\n\n* 정답 맞춰보기\n    * 정답 읽어들이기. `what=\"\"`로 설정하여 `char`취급. \n\n```{r}\n(ans <- scan(\"../literacy_data/literacy_ans.txt\", what=\"\"))\n```\n\n* 각 학생들의 답안과 맞춰보기 위하여 정답표 작성.\n    * 문항별로 정답과 비교하기 위하여 각 문항을 리스트의 원소로 분리\n    * `split()` 의 기능과 한계에 유의. `factor` 성격으로부터 `1, 10, 11, ..., 2, 20, ..., 3, 4, 5, ... , 9`로 순서를 잡게 되므로 다시 한번 정리할 필요.\n    \n```{r}\n(ans.l <- split(ans, f=paste(\"A\", 1:25, sep=\"\")))\n(ans.l.2 <- ans.l[paste(\"A\", 1:25, sep=\"\")])\n\n# ans.mat <- matrix(rep(ans, each = nrow(literacy)), nrow = 70)\n# head(ans.mat)\n```\n\n* 정답과 대조하여 R(Right)/W(Wrong) 표시 \n    * 채점표라는 의미의 `literacy.marks` 로 저장\n```{r}\nliteracy.marks.rw <- mapply(function(x, y) factor(ifelse(x == y, \"R\", \"W\")), y = ans.l.2, literacy[, -1])\n# literacy.marks <- literacy[, -1] == ans.mat\nliteracy.marks.rw\n```\n\n* 학생별 정답 갯수 산출\n    + 정답을 집계하기 위하여 \"R\" 갯수를 다시 산출하는 `ifelse()` 적용.\n    + 4점씩 곱하면 100점 만점 기준의 점수가 됨. \n    + 조사표는 작성해서 제출했지만 빈칸이 있는 경우는 그 문항을 0점 처리, 결석의 경우는 점수가 모두 0으로 나오는 경우를  NA처리 \n    \n```{r}\n(literacy.marks <- ifelse(literacy.marks.rw == \"R\", 1, 0))\n(literacy.score <- apply(literacy.marks, 1, sum, na.rm = TRUE) * 4)\nstem(literacy.score, scale = 2)\nliteracy.score[literacy.score == 0] <- NA\nstem(literacy.score, scale = 1)\n```\n\n* 문해력 등급 판정\n    * 1수준(24점 이하), 2수준(28 ~ 48점), 3수준(52 ~ 72점), 4수준(76점 이상) \n    \n```{r}\n(literacy.level <- ifelse(literacy.score <= 24, \"1\", ifelse(literacy.score <= 48, \"2\", ifelse(literacy.score <= 72, \"3\", \"4\"))))\ntable(\"문해력 등급 분포\" = literacy.level)\n```\n\n* 문항유형표 읽어들이기  \n\n```{r}\n(type <- scan(file = \"../literacy_data/literacy_type.txt\", what = \"\"))\n(type.kr <- factor(type, levels=c(\"a\", \"b\", \"c\"), labels=c(\"사실적\", \"추론적\", \"비판적\")))\n```\n\n* 유형별 점수 파악\n    * 왜 `literacy.marks`의 전치행렬을 사용하고 있는지 이해 필요.\n    * 변수들은 사실상 각 학생을 나타내므로 변수명을 `s1, s2, ...` 등으로 바꿈.\n    * 일부 문항의 응답이 NA이면 그 문항을 0점 처리, 결석이면 NA 처리. \n\n```{r}\nliteracy.type.score <- aggregate(t(literacy.marks), list(\"유형\" = type.kr), sum, na.rm = TRUE)\ndata.frame(\"유형\" = literacy.type.score[, 1], literacy.type.score[, 2:25]*4)\ndata.frame(\"유형\" = literacy.type.score[, 1], literacy.type.score[, 26:48]*4)\ndata.frame(\"유형\" = literacy.type.score[, 1], literacy.type.score[, 49:71]*4)\nnames(literacy.type.score)[-1] <- paste(\"s\", 1:70, sep=\"\")\nliteracy.type.score == 0\nliteracy.type.score[literacy.type.score == 0] <- NA\ndata.frame(\"유형\" = literacy.type.score[, 1], literacy.type.score[, 2:25]*4)\ndata.frame(\"유형\" = literacy.type.score[, 1], literacy.type.score[, 26:48]*4)\ndata.frame(\"유형\" = literacy.type.score[, 1], literacy.type.score[, 49:71]*4)\n```\n\n### 문항별 정답률\n\n* 결석한 경우와 일부 문항에 답을 내지 않은 경우를 구분하는 것이 핵심.\n    + `literacy.marks`를 그대로 이용하면 쉽게 계산되나, `is.na`학습 목적으로 `literacy.mark.rw`에서 출발\n    + 모든 문항에 NA로 답한 결석한 학생들의 인덱스를 먼저 찾아내고,\n    \n```{r}\napply(literacy.marks.rw, 1, function(x) all(is.na(x)))\n(na.all <- which(apply(literacy.marks.rw, 1, function(x) all(is.na(x)))))\n```\n\n* 정답률 계산\n    + NA를 모두 오답처리한 후, 결석한 학생들만 다시 NA로 정정.\n    + TRUE의 갯수를 합하여 평균. \n    \n```{r}\n(literacy.marks.2 <- literacy.marks.rw)\nliteracy.marks.2[is.na(literacy.marks.2)] <- \"W\"\nliteracy.marks.2[na.all, ] <- NA\nliteracy.marks.2 <- ifelse(literacy.marks.2 == \"R\", 1, 0)\noptions(digits=3)\n(rate.by.item <- apply(literacy.marks.2, 2, mean, na.rm=TRUE)*100)\nstr(rate.by.item)\n(rate.by.item <- as.matrix(rate.by.item, 25))\ndimnames(rate.by.item) <- list(\"문항\"= paste(\"문\", 1:25, sep=\"\"), \"정답률\"=\"정답률\")\nrate.by.item\ncolnames(rate.by.item) <- \"정답률\"\n```\n\n* 유형별 정답률 계산\n\n```{r}\n(rate.by.item.type <- data.frame(\"유형\" = type.kr, \"정답률\" = rate.by.item))\ndimnames(rate.by.item.type) <- list(\"문항\"= paste(\"문\", 1:25, sep=\"\"), \"유형과 정답률\"=c(\"유형\", \"정답률\"))\nrate.by.item.type\n```\n\n* `replace()`를 이용하면, \n\n```{r}\n(literacy.marks.3 <- replace(literacy.marks.rw, is.na(literacy.marks.rw), \"W\"))\nliteracy.marks.3[na.all, ] <- NA\nliteracy.marks.3\n```\n\n* 어떤 문항의 정답률이 유난히 낮은가?\n\n```{r}\nrate.by.item[which(rate.by.item <= 80)]\nrate.by.item[which(rate.by.item <= 70)]\nrate.by.item[which(rate.by.item <= 60)]\n```\n\n## Data 정리\n\n```{r}\nsave.image(\"literacy_201502v2.rda\")\n```\n",
    "created" : 1444414582103.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "999470773",
    "id" : "E067B151",
    "lastKnownWriteTime" : 1444414767,
    "path" : "~/Desktop/Works/Class/Statistics/R.WD/Class_data/class201502/R/Literacy_201502v2.Rmd",
    "project_path" : "R/Literacy_201502v2.Rmd",
    "properties" : {
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}